{"version":3,"sources":["store/candyStore/candyTypes.ts","store/cryptoWalletStore/walletTypes.ts","hooks/useCandyConf.tsx","components/layout/Header.tsx","store/candyStore/candyReducer.ts","store/cryptoWalletStore/walletReducer.ts","store/metadataStore/metaReducer.ts","store/algorithmSetupStore/algorithmReducer.ts","store/assetsStore/assetsReducer.ts","store/index.ts","App.tsx","index.tsx","store/metadataStore/metaActionTypes.ts","store/assetsStore/assetsTypes.ts","store/algorithmSetupStore/algorithmTypes.ts"],"names":["actionTypes","UPDATE_CANDY_CONFIG","RESET_CANDY_CONFIG","UPDATE_BALANCE","useCandyConf","currentConfig","useSelector","state","candy","machineConfig","key","trim","length","localStorage","setItem","web3","PublicKey","Connection","parseInt","Routes","initialState","treasury","getItem","config","candyMachineId","network","connection","startDateSeed","candyReducer","action","type","payload","stateCopy","Object","assign","removeItem","balance","walletReducer","name","symbol","description","seller_fee_basis_points","collection","family","properties","category","creators","metaReducer","UPDATE_META_NAME","UPDATE_META_SYMBOL","UPDATE_META_DESCRIPTION","UPDATE_META_SELLER","UPDATE_META_COLLECTION_NAME","UPDATE_META_COLLECTION_FAMILY","UPDATE_META_PROPERTIES_CATEGORY","UPDATE_META_PROPERTIES_CREATORS","isAddress","creatorId","newValue","updatedCreators","map","creator","id","address","share","REMOVE_META_PROPERTIES_CREATORS","console","log","filter","ADD_META_PROPERTIES_CREATORS","UPLOAD_META","metadata","forEach","idx","images_count","size","height","width","time_limit","sequences_is_unique","backgroud_color_rgba","formStringToBoolean","val","algorithmReducer","algTypes","UPDATE_IMAGES_COUNT","UPDATE_IMAGE_SIZE","isHeight","UPDATE_TIMEOUT","UPDATE_SEQUENCES_UNIQUE","UPDATE_BACKGROUND_COLOR","UPLOAD_CONF","assetsReducer","assetsTypes","ADD_FOLDER","folderName","assets","DELETE_FOLDER","folder","UPDATE_FOLDER","updatedFolder","UPDATE_ASSETS","folderId","folders","DELETE_ASSET","assetId","asset","UPDATE_ASSET_NAME","idFolder","idAsset","DOWNLOAD_SLICES","store","createStore","combineReducers","wallet","outputConf","assetsSlices","composeWithDevTools","Header","history","useHistory","useState","location","pathname","setPathname","useEffect","push","DOCS","className","Box","sx","borderBottom","borderColor","TabContext","value","TabList","textColor","indicatorColor","onChange","e","Tab","label","GENERATE_COLLECTION","MINT","Documentation","React","lazy","CreateCollectables","Mint","App","machineConf","endpoint","useMemo","clusterApiUrl","wallets","getPhantomWallet","getSlopeWallet","getSolflareWallet","getSolletWallet","getSolletExtensionWallet","ConnectionProvider","WalletProvider","autoConnect","fallback","path","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9d880f48.chunk.js","sourcesContent":["const actionTypes = {\r\n    UPDATE_CANDY_CONFIG: 'UPDATE_CANDY_CONFIG',\r\n    RESET_CANDY_CONFIG: 'RESET_CANDY_CONFIG'\r\n}\r\n\r\nexport default actionTypes","const actionTypes = {\r\n    UPDATE_BALANCE: 'UPDATE_BALANCE' \r\n}\r\n\r\nexport default actionTypes","import { web3 } from '@project-serum/anchor'\r\nimport { useSelector } from 'react-redux'\r\nimport { UpdateMachineConfigProps, MachineConfig } from '../store/candyStore/types'\r\nimport { WalletAdapterNetwork } from \"@solana/wallet-adapter-base\"\r\n\r\nconst useCandyConf = (): MachineConfig | null => {\r\n    const currentConfig = useSelector((state: { candy: UpdateMachineConfigProps }) => state.candy)\r\n    const machineConfig: MachineConfig = {} as MachineConfig\r\n\r\n    for (const key in currentConfig) {\r\n        const valueExist = !!currentConfig[key].trim().length\r\n        if (!valueExist) return null\r\n        \r\n        switch (key) {\r\n            case 'treasury':\r\n            case 'config':\r\n            case 'candyMachineId':\r\n                localStorage.setItem(key, currentConfig[key])\r\n                machineConfig[key] = new web3.PublicKey(currentConfig[key])\r\n                break\r\n            case 'network':\r\n                localStorage.setItem(key, currentConfig[key])\r\n                machineConfig[key] = currentConfig[key] as WalletAdapterNetwork\r\n                break\r\n            case 'connection':\r\n                localStorage.setItem(key, currentConfig[key])\r\n                machineConfig[key] = new web3.Connection(currentConfig[key])\r\n                break\r\n            case 'startDateSeed':\r\n                localStorage.setItem(key, currentConfig[key])\r\n                machineConfig[key] = parseInt(currentConfig[key], 10)\r\n                break\r\n        }\r\n    }\r\n\r\n    return machineConfig\r\n}\r\n\r\nexport default useCandyConf","import { useEffect, useState } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { Tab, Box } from '@material-ui/core'\r\nimport { TabList, TabContext } from '@material-ui/lab';\r\nimport './Header.scss'\r\n\r\nenum Routes {\r\n    MINT = '/mint',\r\n    DOCS = '/docs',\r\n    GENERATE_COLLECTION = '/generate-collection'\r\n}\r\n\r\nconst Header = () => {\r\n    const history = useHistory()\r\n    const [pathname, setPathname] = useState(history.location.pathname)\r\n\r\n    useEffect(() => {\r\n        if (pathname === '/') {\r\n            history.push(Routes.DOCS)\r\n            setPathname(Routes.DOCS)\r\n        }\r\n    }, [pathname, history])\r\n\r\n    const changeRoute = (e: React.ChangeEvent<{}>, pathname: string) => {\r\n        history.push(pathname)\r\n        setPathname(pathname)\r\n    }\r\n\r\n    return (\r\n        <header className=\"header\">\r\n            <nav>\r\n                <Box sx={{ width: '100%' }}>\r\n                    <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>\r\n                        <TabContext value={history.location.pathname}>\r\n                            <TabList \r\n                                textColor=\"primary\"\r\n                                indicatorColor=\"primary\"\r\n                                onChange={changeRoute}\r\n                            >\r\n                                <Tab label=\"Docs\" value={Routes.DOCS} />\r\n                                <Tab label=\"Genrate collection\" value={Routes.GENERATE_COLLECTION} />\r\n                                <Tab label=\"Mint NFT\" value={Routes.MINT} />\r\n                            </TabList>\r\n                        </TabContext>\r\n                    </Box>\r\n                </Box>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { ActionCreator, UpdateMachineConfigProps } from './types'\r\nimport actionTypes from './candyTypes'\r\n\r\nconst initialState = {\r\n    treasury: localStorage.getItem('treasury') ?? '',\r\n    config: localStorage.getItem('config') ?? '',\r\n    candyMachineId: localStorage.getItem('candyMachineId') ?? '',\r\n    network: localStorage.getItem('network') ?? '',\r\n    connection: localStorage.getItem('connection') ?? '',\r\n    startDateSeed: localStorage.getItem('startDateSeed') ?? '',   \r\n}\r\n\r\nconst candyReducer = (state = initialState, action: ActionCreator) => {\r\n    switch (action.type)  {\r\n        case actionTypes.UPDATE_CANDY_CONFIG:\r\n            return { ...state, ...action.payload }\r\n\r\n        case actionTypes.RESET_CANDY_CONFIG:\r\n            const stateCopy: UpdateMachineConfigProps = Object.assign({}, state)\r\n            for (let key in stateCopy) {\r\n                stateCopy[key] = ''\r\n                localStorage.removeItem(key)\r\n            }\r\n\r\n            return { ...stateCopy }\r\n            \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default candyReducer","import actionTypes from \"./walletTypes\";\r\nimport { WalletActionCreator, CryptoWallet } from \"./types\";\r\n\r\nconst initialState = {\r\n    balance: null\r\n}\r\n\r\nconst walletReducer = (state: CryptoWallet = initialState, action: WalletActionCreator) => {\r\n    switch (action.type) {\r\n        case actionTypes.UPDATE_BALANCE:\r\n            return {\r\n                ...state,\r\n                balance: action.payload\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default walletReducer","import actionTypes from \"./metaActionTypes\"\r\nimport { TokenMetadata, Creator, MetadataActionCreator, Category, CreatorsUpdateType } from \"./types\"\r\n\r\nconst initialState: TokenMetadata = {\r\n    name: '',\r\n    symbol: '',\r\n    description: '',\r\n    seller_fee_basis_points: 0,\r\n    collection: {\r\n        name: '',\r\n        family: ''\r\n    },\r\n    properties: {\r\n        category: '',\r\n        creators: [] as Creator[]\r\n    }\r\n}\r\n\r\nconst metaReducer = (state = initialState, action: MetadataActionCreator<unknown>): TokenMetadata => {\r\n    switch (action.type) {\r\n        case actionTypes.UPDATE_META_NAME:\r\n            return {\r\n                ...state,\r\n                name: action.payload as string\r\n            }\r\n        case actionTypes.UPDATE_META_SYMBOL: \r\n            return {\r\n                ...state, \r\n                symbol: action.payload as string\r\n            }\r\n\r\n        case actionTypes.UPDATE_META_DESCRIPTION:\r\n            return {\r\n                ...state,\r\n                description: action.payload as string\r\n            }\r\n        case actionTypes.UPDATE_META_SELLER:\r\n            return {\r\n                ...state,\r\n                seller_fee_basis_points: action.payload as number\r\n            }\r\n\r\n        case actionTypes.UPDATE_META_COLLECTION_NAME:\r\n            return {\r\n                ...state,\r\n                collection: {\r\n                    ...state.collection,\r\n                    name: action.payload as string\r\n                }\r\n            }\r\n        case actionTypes.UPDATE_META_COLLECTION_FAMILY:\r\n            return {\r\n                ...state,\r\n                collection: {\r\n                    ...state.collection,\r\n                    family: action.payload as string\r\n                }\r\n            }\r\n\r\n        case actionTypes.UPDATE_META_PROPERTIES_CATEGORY:\r\n            return {\r\n                ...state,\r\n                properties: {\r\n                    ...state.properties,\r\n                    category: action.payload as Category\r\n                }\r\n            }\r\n\r\n        case actionTypes.UPDATE_META_PROPERTIES_CREATORS:\r\n            const { isAddress, creatorId, newValue } = action.payload as CreatorsUpdateType\r\n            const updatedCreators = state.properties.creators.map(creator => \r\n                creator.id === creatorId ? isAddress ? { ...creator, address: newValue } : { ...creator, share: newValue } : creator\r\n            )\r\n\r\n            return {\r\n                ...state,\r\n                properties: {\r\n                    ...state.properties,\r\n                    creators: updatedCreators as Creator[]\r\n                }\r\n            }\r\n\r\n        case actionTypes.REMOVE_META_PROPERTIES_CREATORS:\r\n            console.log(action.payload)\r\n            const creators = state.properties.creators.filter(creator => creator.id !== action.payload)\r\n            return {\r\n                ...state,\r\n                properties: {\r\n                    ...state.properties,\r\n                    creators\r\n                }\r\n            }\r\n\r\n        case actionTypes.ADD_META_PROPERTIES_CREATORS:\r\n            return {\r\n                ...state,\r\n                properties: {\r\n                    ...state.properties,\r\n                    creators: [ ...state.properties.creators, action.payload as Creator ]\r\n                }\r\n            }\r\n        case actionTypes.UPLOAD_META:\r\n            const metadata = action.payload as TokenMetadata\r\n            metadata.properties.creators.forEach((creator, idx) => { creator.id = idx + 1})\r\n            return { ...metadata }\r\n        \r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default metaReducer","import algTypes from './algorithmTypes'\r\nimport { OutputImageConf, AlgoActionCreator, SizeValue } from './types'\r\n\r\nconst initialState: OutputImageConf = {\r\n    images_count: 0,\r\n    size: {\r\n        height: 0,\r\n        width: 0\r\n    },\r\n    time_limit: false,\r\n    sequences_is_unique: false,\r\n    backgroud_color_rgba: '0, 0, 0, 255'\r\n}\r\n\r\nconst formStringToBoolean = (val: string) => {\r\n    if (val === 'true') return true\r\n    if (val === 'false') return false\r\n    return 'null'\r\n}\r\n\r\nconst algorithmReducer = (state = initialState, action: AlgoActionCreator<unknown>): OutputImageConf => {\r\n    switch (action.type) {\r\n        case algTypes.UPDATE_IMAGES_COUNT: {\r\n            return {\r\n                ...state,\r\n                images_count: action.payload as number\r\n            }\r\n        }\r\n\r\n        case algTypes.UPDATE_IMAGE_SIZE: {\r\n            const { isHeight, newValue } = action.payload as SizeValue\r\n            const stateCopy = Object.assign({}, state)\r\n            stateCopy.size[isHeight ? 'height' : 'width'] = newValue\r\n            return stateCopy\r\n        }\r\n\r\n        case algTypes.UPDATE_TIMEOUT:\r\n            const time_limit = action.payload  as boolean | number\r\n            return { ...state, time_limit }\r\n\r\n        case algTypes.UPDATE_SEQUENCES_UNIQUE:\r\n            const sequences_is_unique = formStringToBoolean(action.payload as string)\r\n            return sequences_is_unique !== 'null' ? { ...state, sequences_is_unique } : state\r\n        \r\n        case algTypes.UPDATE_BACKGROUND_COLOR:\r\n            return {\r\n                ...state,\r\n                backgroud_color_rgba: action.payload as string\r\n            }\r\n\r\n        case algTypes.UPLOAD_CONF:\r\n            return {\r\n                ...action.payload as OutputImageConf\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default algorithmReducer","import assetsTypes from \"./assetsTypes\"\r\nimport { \r\n    FolderState, \r\n    AssetsActionCreator, \r\n    UpdatedFolder, \r\n    UpdateAssetsType, \r\n    AssetToDelete, \r\n    UpdateAssetNamePaylaod \r\n} from \"./types\"\r\n\r\nconst initialState = [] as FolderState[]\r\n\r\nconst assetsReducer = (state = initialState, action: AssetsActionCreator<unknown>) => {\r\n    switch (action.type) {\r\n        case assetsTypes.ADD_FOLDER:\r\n            return [ ...state, { id: state.length + 1, folderName: 'Default name', assets: [] }]\r\n\r\n        case assetsTypes.DELETE_FOLDER:\r\n            return [...state.filter(folder => folder.id !== action.payload)]\r\n\r\n        case assetsTypes.UPDATE_FOLDER:\r\n            const updatedFolder = action.payload as UpdatedFolder\r\n            return state.map(folder => folder.id === updatedFolder.id ? { ...folder, ...updatedFolder} : folder)\r\n\r\n        case assetsTypes.UPDATE_ASSETS:\r\n            const { folderId, assets } = action.payload as UpdateAssetsType\r\n            const folders = state.map((folder, idx) => {\r\n                if (folder.id === folderId) {\r\n                    folder.assets = [...state[idx].assets, ...assets]\r\n                }\r\n                return folder\r\n            })\r\n            return folders\r\n\r\n        case assetsTypes.DELETE_ASSET:\r\n            const { folderId: id, assetId } = action.payload as AssetToDelete\r\n            return state.map(folder => {\r\n                if (folder.id === id) {\r\n                    folder.assets = folder.assets.filter(asset => asset.id !== assetId)\r\n                }\r\n                return folder\r\n            })\r\n\r\n        case assetsTypes.UPDATE_ASSET_NAME:\r\n            const { folderId: idFolder, assetId: idAsset, name } = action.payload as UpdateAssetNamePaylaod\r\n            return state.map(folder => {\r\n                if (folder.id === idFolder) {\r\n                    folder.assets = folder.assets.map(asset => {\r\n                        if (asset.id === idAsset) asset.name = name\r\n                        return asset\r\n                    })\r\n                }\r\n                return folder\r\n            })\r\n\r\n        case assetsTypes.DOWNLOAD_SLICES: \r\n            return action.payload as FolderState[]\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default assetsReducer","import { createStore, combineReducers } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport candyReducer from './candyStore/candyReducer'\r\nimport walletReducer from './cryptoWalletStore/walletReducer'\r\nimport metaReducer from './metadataStore/metaReducer';\r\nimport algorithmReducer from './algorithmSetupStore/algorithmReducer';\r\nimport assetsReducer from './assetsStore/assetsReducer'\r\n\r\nconst store = createStore(\r\n    combineReducers({ \r\n        candy: candyReducer, \r\n        wallet: walletReducer, \r\n        metadata: metaReducer,\r\n        outputConf: algorithmReducer,\r\n        assetsSlices: assetsReducer\r\n    }), \r\n    composeWithDevTools()\r\n)\r\n\r\nexport default store","import React, { Suspense } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport Header from './components/layout/Header'\nimport useCandyConf from \"./hooks/useCandyConf\"\nimport { useMemo } from \"react\"\nimport { clusterApiUrl } from '@solana/web3.js'\nimport { getPhantomWallet, getSlopeWallet, getSolflareWallet, getSolletWallet, getSolletExtensionWallet } from '@solana/wallet-adapter-wallets'\nimport { ConnectionProvider, WalletProvider } from '@solana/wallet-adapter-react'\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui'\n\nimport './App.scss';\nconst Documentation = React.lazy(() => import('./components/docs/Documentation'))\nconst CreateCollectables = React.lazy(() => import('./components/collectionCreate/CreateCollectables'))\nconst Mint = React.lazy(() => import('./components/mint/Mint'))\n\nconst App = () => {\n    const machineConf = useCandyConf()\n    const endpoint = useMemo(() => clusterApiUrl(machineConf?.network), [machineConf?.network])\n    const wallets = useMemo(() => [\n        getPhantomWallet(), \n        getSlopeWallet(), \n        getSolflareWallet(), \n        getSolletWallet({ network: machineConf?.network }), \n        getSolletExtensionWallet({ network: machineConf?.network })\n    ], [machineConf?.network])\n\n    return (\n        <div className=\"app\">\n            <Router>\n                <Header />\n                <main>\n                    <Switch>\n                        <ConnectionProvider endpoint={endpoint}>\n                            <WalletProvider wallets={wallets} autoConnect={true}>\n                                <WalletDialogProvider>\n                                    <Suspense fallback={<div>Загрзка...</div>}>\n                                        <Route path='/docs'>\n                                            <Documentation />\n                                        </Route>\n                                        <Route path='/mint'>\n                                            <Mint />            \n                                        </Route>\n                                        <Route path='/generate-collection'>\n                                            <CreateCollectables />\n                                        </Route>\n                                    </Suspense>\n                                </WalletDialogProvider>\n                            </WalletProvider>\n                        </ConnectionProvider>\n                    </Switch>\n                </main>\n            </Router>\n        </div>\n    )\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport store from './store'\nimport App from './App';\nimport './index.scss';\n\nReactDOM.render(\n    <React.StrictMode>\n        <Provider store={store}>\n            <App /> \n        </Provider>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n","const actionTypes = {\r\n    UPDATE_META_NAME: 'UPDATE_META_NAME', \r\n    UPDATE_META_SYMBOL: 'UPDATE_META_SYMBOL',\r\n    UPDATE_META_DESCRIPTION: 'UPDATE_META_DESCRIPTION',\r\n    UPDATE_META_SELLER: 'UPDATE_META_SELLER',\r\n    UPDATE_META_COLLECTION_NAME: 'UPDATE_META_COLLECTION_NAME',\r\n    UPDATE_META_COLLECTION_FAMILY: 'UPDATE_META_COLLECTION_FAMILY',\r\n    UPDATE_META_PROPERTIES_CATEGORY: 'UPDATE_META_PROPERTIES_CATEGORY',\r\n    UPDATE_META_PROPERTIES_CREATORS: 'UPDATE_META_PROPERTIES_CREATORS',\r\n    REMOVE_META_PROPERTIES_CREATORS: 'REMOVE_META_PROPERTIES_CREATORS',\r\n    ADD_META_PROPERTIES_CREATORS: 'ADD_META_PROPERTIES_CREATORS',\r\n    UPLOAD_META: 'UPLOAD_META'\r\n}\r\n\r\nexport default actionTypes","const assetsTypes = {\r\n    ADD_FOLDER: 'ADD_FOLDER',\r\n    DELETE_FOLDER: 'REMOVE_FOLDER',\r\n    UPDATE_FOLDER: 'UPDATE_FOLDER',\r\n    UPDATE_ASSETS: 'UPDATE_ASSETS',\r\n    DELETE_ASSET: 'DELETE_ASSET',\r\n    UPDATE_ASSET_NAME: 'UPDATE_ASSET_NAME',\r\n    DOWNLOAD_SLICES: 'DOWNLOAD_SLICES'\r\n}\r\n\r\nexport default assetsTypes","const algTypes = {\r\n    UPDATE_IMAGES_COUNT: 'UPDATE_IMAGES_COUNT',\r\n    UPDATE_IMAGE_SIZE: 'UPDATE_IMAGE_WIDTH',\r\n    UPDATE_TIMEOUT: 'UPDATE_TIMEOUT',\r\n    UPDATE_SEQUENCES_UNIQUE: 'UPDATE_SEQUENCES_UNIQUE',\r\n    UPDATE_BACKGROUND_COLOR: 'UPDATE_BACKGROUND_COLOR',\r\n    UPLOAD_CONF: 'UPLOAD_CONF'\r\n}\r\n\r\nexport default algTypes"],"sourceRoot":""}