{"version":3,"sources":["components/mint/helpers/solanaUtils/solanaUtils.ts","components/mint/machineSetup/CandyMachineSetup.tsx","store/candyStore/candyActionCreators.ts","store/cryptoWalletStore/walletActionCreatores.ts","components/mint/countDown/Counter.tsx","components/mint/countDown/CountDown.tsx","components/mint/helpers/mintUseReducer/mintActionTypes.ts","components/mint/helpers/mintUseReducer/mintReducer.ts","components/mint/helpers/mintUseReducer/mintActionCreators.ts","components/mint/mintNft/MintNft.tsx","components/mint/Mint.tsx"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","TOKEN_METADATA_PROGRAM_ID","sleep","ms","Promise","resolve","setTimeout","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","commitment","queryStatus","done","status","slot","confirmations","err","subId","reject","console","log","onSignature","result","context","error","getSignatureStatuses","signatureStatuses","value","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","candyMachine","id","account","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","goLiveDate","Date","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getTokenWallet","wallet","mintOneToken","config","treasury","Keypair","generate","publicKey","token","metadata","masterEdition","getMinimumBalanceForRentExemption","MintLayout","span","rent","rpc","mintNft","accounts","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","clock","SYSVAR_CLOCK_PUBKEY","signers","instructions","createAccount","fromPubkey","newAccountPubkey","space","lamports","Token","createInitMintInstruction","createMintToInstruction","CandyMachineSetup","machineConfig","useSelector","candy","useState","conf","setConf","isShown","setIsShonw","dispatch","useDispatch","className","TextField","label","onChange","e","prevConf","target","startDateSeed","FormControl","InputLabel","Select","labelId","network","MenuItem","Button","variant","color","onClick","payload","type","actionTypes","UPDATE_CANDY_CONFIG","RESET_CANDY_CONFIG","updateWalletBalance","UPDATE_BALANCE","Counter","days","hours","minutes","seconds","CountDown","props","renderer","actionsType","mintReduser","action","isSoldOut","dateStart","balance","isMinting","alertState","isActive","changeMintingStatus","changeSoldOutStatus","settingBalanceValue","updateAlertState","updateIsActive","MintNft","startDate","txTimeout","cryptoWallet","dispatchCryptoWallet","initialState","open","message","severity","undefined","useReducer","useAnchorWallet","updateCandyMachineState","mintToken","mintTxId","msg","code","indexOf","getBalance","solBalance","LAMPORTS_PER_SOL","useEffect","disabled","CircularProgress","date","onMount","completed","onComplete","Snackbar","autoHideDuration","onClose","Alert","Mint","machineConf","useCandyConf"],"mappings":"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","file":"static/js/8.f0170241.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor'\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token'\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n    'cndyAnrLdpjq1Ssp1z8xxDsB8dxe7u4HL5Nxi2K5WXZ'\r\n)\r\n\r\nconst SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL'\r\n)\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n    'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s'\r\n)\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n    return new Promise((resolve) => setTimeout(resolve, ms))\r\n}\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n    return `${address.slice(0, chars)}...${address.slice(-chars)}`\r\n}\r\n\r\nexport type CandyMachine = {\r\n    id: anchor.web3.PublicKey\r\n    connection: anchor.web3.Connection\r\n    program: anchor.Program\r\n}\r\n\r\ntype CandyMachineState = {\r\n    candyMachine: CandyMachine\r\n    itemsAvailable: number\r\n    itemsRedeemed: number\r\n    itemsRemaining: number\r\n    goLiveDate: Date\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n    txid: anchor.web3.TransactionSignature,\r\n    timeout: number,\r\n    connection: anchor.web3.Connection,\r\n    commitment: anchor.web3.Commitment = 'recent',\r\n    queryStatus = false\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n    let done = false\r\n    let status: anchor.web3.SignatureStatus | null | void = {\r\n        slot: 0,\r\n        confirmations: 0,\r\n        err: null\r\n    }\r\n\r\n    let subId = 0\r\n    status = await new Promise(async (resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (done) return\r\n            done = true\r\n            console.log('Rejecting for timeout...')\r\n            reject({ timeout: true })\r\n        }, timeout)\r\n        try {\r\n            subId = connection.onSignature(\r\n                txid,\r\n                (result, context) => {\r\n                    done = true\r\n                    status = { slot: context.slot, confirmations: 0, err: result.err }\r\n                    if (result.err) {\r\n                        console.log('Rejected via websocket', result.err)\r\n                        reject(status)\r\n                    } else {\r\n                        console.log('Resolved via websocket', result)\r\n                        resolve(status)\r\n                    }\r\n                },\r\n                commitment\r\n            )\r\n        } catch (error) {\r\n            done = true\r\n            console.error('WS error in setup', txid, error)\r\n        }\r\n        while (!done && queryStatus) {\r\n            try {\r\n                const signatureStatuses = await connection.getSignatureStatuses([txid])\r\n                status = signatureStatuses && signatureStatuses.value[0]\r\n                if (!done) {\r\n                    if (!status) {\r\n                        console.log('REST null result for', txid, status)\r\n                    } else if (status.err){\r\n                        console.log('REST error for', txid, status)\r\n                        done = true\r\n                        reject(status.err)\r\n                    } else if (!status.confirmations) {\r\n                        console.log('REST confirmations', txid, status)\r\n                    } else {\r\n                        console.log('REST confirmation for', txid, status)\r\n                        done = true\r\n                        resolve(status)\r\n                    }\r\n                }\r\n            } catch (error) {\r\n                if (!done) {\r\n                    console.log('REST connnection error: txid', txid, error)\r\n                }\r\n            }\r\n            await sleep(2000)\r\n        }\r\n    })\r\n\r\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\r\n    // @ts-ignore\r\n    if (connection._signatureSubscriptions[subId]) {\r\n        connection.removeSignatureListener(subId)\r\n    }\r\n    done = true\r\n    console.log('Returning status', status)\r\n    return status\r\n}\r\nconst createAssociatedTokenAccountInstruction = (\r\n    associatedTokenAddress: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    walletAddress: anchor.web3.PublicKey,\r\n    splTokenMintAddress: anchor.web3.PublicKey\r\n) => {\r\n    const keys = [\r\n        { pubkey: payer, isSigner: true, isWritable: true },\r\n        { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n        { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n        { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SystemProgram.programId,\r\n            isSigner: false,\r\n            isWritable: false\r\n        },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n        {\r\n            pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n            isSigner: false,\r\n            isWritable: false\r\n        }\r\n    ]\r\n\r\n    return new anchor.web3.TransactionInstruction({\r\n        keys,\r\n        programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n        data: Buffer.from([])\r\n    })\r\n}\r\n\r\nexport const getCandyMachineState = async (\r\n    anchorWallet: anchor.Wallet,\r\n    candyMachineId: anchor.web3.PublicKey,\r\n    connection: anchor.web3.Connection\r\n): Promise<CandyMachineState> => {\r\n    const provider = new anchor.Provider(connection, anchorWallet, { preflightCommitment: 'recent' })\r\n\r\n    const idl = (await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider)) as anchor.Idl\r\n\r\n    const program = new anchor.Program(idl, CANDY_MACHINE_PROGRAM, provider)\r\n    const candyMachine = { id: candyMachineId, connection, program }\r\n\r\n    const state = await program.account.candyMachine.fetch(candyMachineId)\r\n    const itemsAvailable = state.data.itemsAvailable.toNumber()\r\n    const itemsRedeemed = state.itemsRedeemed.toNumber()\r\n    const itemsRemaining = itemsAvailable - itemsRedeemed\r\n\r\n    let goLiveDate = state.data.goLiveDate.toNumber()\r\n    goLiveDate = new Date(goLiveDate * 1000)\r\n\r\n    return { candyMachine, itemsAvailable, itemsRedeemed, itemsRemaining, goLiveDate }\r\n}\r\n\r\nconst getMasterEdition = async (\r\n    mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer(),\r\n                Buffer.from('edition')\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID\r\n        )\r\n    )[0]\r\n}\r\n\r\nconst getMetadata = async (\r\n    mint: anchor.web3.PublicKey\r\n): Promise<anchor.web3.PublicKey> => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [\r\n                Buffer.from('metadata'),\r\n                TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n                mint.toBuffer()\r\n            ],\r\n            TOKEN_METADATA_PROGRAM_ID\r\n        )\r\n    )[0]\r\n}\r\n\r\nconst getTokenWallet = async (\r\n    wallet: anchor.web3.PublicKey,\r\n    mint: anchor.web3.PublicKey\r\n) => {\r\n    return (\r\n        await anchor.web3.PublicKey.findProgramAddress(\r\n            [wallet.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n            SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID\r\n        )\r\n    )[0]\r\n}\r\n\r\nexport const mintOneToken = async (\r\n    candyMachine: CandyMachine,\r\n    config: anchor.web3.PublicKey,\r\n    payer: anchor.web3.PublicKey,\r\n    treasury: anchor.web3.PublicKey\r\n): Promise<string> => {\r\n    const mint = anchor.web3.Keypair.generate()\r\n    const token = await getTokenWallet(payer, mint.publicKey)\r\n    const { connection, program } = candyMachine\r\n    const metadata = await getMetadata(mint.publicKey)\r\n    const masterEdition = await getMasterEdition(mint.publicKey)\r\n\r\n    const rent = await connection.getMinimumBalanceForRentExemption(\r\n        MintLayout.span\r\n    )\r\n\r\n    return await program.rpc.mintNft({\r\n        accounts: {\r\n            config,\r\n            candyMachine: candyMachine.id,\r\n            payer: payer,\r\n            wallet: treasury,\r\n            mint: mint.publicKey,\r\n            metadata,\r\n            masterEdition,\r\n            mintAuthority: payer,\r\n            updateAuthority: payer,\r\n            tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n            tokenProgram: TOKEN_PROGRAM_ID,\r\n            systemProgram: anchor.web3.SystemProgram.programId,\r\n            rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n            clock: anchor.web3.SYSVAR_CLOCK_PUBKEY\r\n        },\r\n        signers: [mint],\r\n        instructions: [\r\n            anchor.web3.SystemProgram.createAccount({\r\n                fromPubkey: payer,\r\n                newAccountPubkey: mint.publicKey,\r\n                space: MintLayout.span,\r\n                lamports: rent,\r\n                programId: TOKEN_PROGRAM_ID\r\n            }),\r\n            Token.createInitMintInstruction(TOKEN_PROGRAM_ID, mint.publicKey, 0, payer, payer),\r\n            createAssociatedTokenAccountInstruction(token, payer, payer, mint.publicKey),\r\n            Token.createMintToInstruction(TOKEN_PROGRAM_ID, mint.publicKey, token, payer, [], 1)\r\n        ]\r\n    })\r\n}\r\n","import { useState } from 'react'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { updateCandyConfig, resetCandyConfig } from '../../../store/candyStore/candyActionCreators'\r\nimport { UpdateMachineConfigProps } from '../../../store/candyStore/types'\r\nimport { TextField, Select, MenuItem, FormControl, InputLabel, Button } from '@material-ui/core'\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport './CandyMachineSetup.scss'\r\n\r\nexport const CandyMachineSetup = () => {\r\n    const machineConfig = useSelector((state: { candy: UpdateMachineConfigProps }) => state.candy)\r\n    const [conf, setConf] = useState(machineConfig)\r\n    const [isShown, setIsShonw] = useState(false)\r\n    const dispatch = useDispatch()\r\n\r\n    const updateCandyMachine = () => {\r\n        dispatch(updateCandyConfig(conf))\r\n        setIsShonw(false)\r\n    }\r\n    \r\n    const resetCandyMachine = () => {\r\n        dispatch(resetCandyConfig())\r\n        setConf({} as UpdateMachineConfigProps)\r\n    }\r\n\r\n    return (\r\n        <div className='candy__setup'>\r\n            {isShown ? (\r\n                <form>\r\n                    <TextField\r\n                        className='candy__setup-form__item'\r\n                        label={'Адресс кошелька создателя (authority)'}\r\n                        value={conf.treasury}\r\n                        onChange={e => setConf(prevConf => ({ ...prevConf, treasury: e.target.value }))}\r\n                    />\r\n                    <TextField\r\n                        className='candy__setup-form__item'\r\n                        label={'Конфигурация (config)'} \r\n                        value={conf.config}\r\n                        onChange={e => setConf(prevConf => ({ ...prevConf, config: e.target.value }))}\r\n                    />\r\n                    <TextField\r\n                        className='candy__setup-form__item'\r\n                        label={'Идентификатор Candy Machine (candyMachineAddress)'}\r\n                        value={conf.candyMachineId}\r\n                        onChange={e => setConf(prevConf => ({ ...prevConf, candyMachineId: e.target.value }))}\r\n                    />\r\n                    <TextField \r\n                        className='candy__setup-form__item'\r\n                        label={'Дата запуска Candy Machine (startDate)'}\r\n                        value={conf.startDateSeed}\r\n                        onChange={e => setConf(prevConf => ({ ...prevConf, startDateSeed: e.target.value }))}\r\n                    />\r\n                    <FormControl\r\n                        className='candy__setup-form__item'\r\n                    >\r\n                        <InputLabel id=\"network-cluster\">Выбирите solana-cluster (env)</InputLabel>\r\n                        <Select\r\n                            labelId=\"network-cluster\"\r\n                            id=\"network-cluster-select\"\r\n                            value={conf.network}\r\n                            onChange={e => setConf(prevConf => ({ ...prevConf, network: e.target.value as string }))}\r\n                        >\r\n                            <MenuItem value={'devnet'}>devnet</MenuItem>\r\n                            <MenuItem value={'mainnet'}>mainnet</MenuItem>\r\n                            <MenuItem value={'testnet'}>testnet</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <FormControl\r\n                        className='candy__setup-form__item'\r\n                    >\r\n                        <InputLabel id=\"connection-url\">Выбирите RPC HOST</InputLabel>\r\n                        <Select\r\n                            labelId=\"connection-url\"\r\n                            id=\"connection-url-select\"\r\n                            value={conf.connection}\r\n                            onChange={e => setConf(prevConf => ({ ...prevConf, connection: e.target.value as string}))}\r\n                        >\r\n                            <MenuItem value={'https://explorer-api.devnet.solana.com'}>https://explorer-api.devnet.solana.com</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <div className=\"candy__setup-actions\" >\r\n                        <Button\r\n                            variant=\"contained\" \r\n                            color=\"primary\" \r\n                            onClick={updateCandyMachine}\r\n                        >\r\n                            Включить Candy Machine\r\n                        </Button>\r\n                        <Button\r\n                            variant='outlined'\r\n                            onClick={resetCandyMachine}\r\n                        >\r\n                            Сбросить настройки\r\n                        </Button>\r\n                        <Button\r\n                            variant='outlined'\r\n                            color='secondary'\r\n                            onClick={() => setIsShonw(false)}\r\n                        >\r\n                            Скрыть меню настроек\r\n                            <KeyboardArrowUpIcon />\r\n                        </Button>\r\n                    </div>\r\n                </form>\r\n            ) : (\r\n                <div className='open__setup-button'>\r\n                    <Button\r\n                        variant='outlined'\r\n                        color='secondary'\r\n                        onClick={() => setIsShonw(true)}\r\n                    >\r\n                        Изменить настройки\r\n                        <KeyboardArrowDownIcon />\r\n                    </Button>\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}","import actionTypes from \"./candyTypes\"\r\nimport { UpdateMachineConfigProps, ActionCreator } from './types'\r\n\r\nexport const updateCandyConfig = (payload: UpdateMachineConfigProps): ActionCreator => ({ type: actionTypes.UPDATE_CANDY_CONFIG, payload })\r\nexport const resetCandyConfig = (): ActionCreator => ({ type: actionTypes.RESET_CANDY_CONFIG })","import actionTypes from \"./walletTypes\";\r\nimport { WalletActionCreator } from \"./types\";\r\n\r\nexport const updateWalletBalance = (payload: number): WalletActionCreator => ({ type: actionTypes.UPDATE_BALANCE, payload })","type CounterProps = {\r\n    days: number\r\n    hours: number\r\n    minutes: number\r\n    seconds: number\r\n}\r\n\r\nexport const Counter = ({ days, hours, minutes, seconds }: CounterProps) => {\r\n    return <span>{hours + (days || 0) * 24} hours, {minutes} minutes, {seconds}</span> \r\n}","import Countdown from 'react-countdown'\r\nimport { Counter } from './Counter'\r\n\r\ntype CountDownProps = {\r\n    date: Date\r\n    onMount: ({ completed }: { completed: boolean }) => void\r\n    onComplete: () => void\r\n}\r\n\r\nexport const CountDown = (props: CountDownProps) => {\r\n    return <Countdown {...props} renderer={Counter} />\r\n}","type ActionTypes = Record<string, string>\r\n\r\nexport const actionsType: ActionTypes = {\r\n    REFRESH_CANDY_MACHINE_STATE: 'REFRESH_CANDY_MACHINE_STATE',\r\n    SET_IS_SOLD_OUT: 'SET_IS_SOLD_OUT',\r\n    SET_BALANCE: 'SET_BALANCE',\r\n    SET_IS_MINTING: 'SET_IS_MINTING',\r\n    UPDATE_ALERT_STATE: 'UPDATE_ALERT_STATE',\r\n    UPDATE_IS_ACTIVE: 'UPDATE_IS_ACTIVE'\r\n}","import { actionsType } from \"./mintActionTypes\";\r\nimport { AlertState, RefreshingPayload, ActionCreator } from \"./mintActionCreators\";\r\nimport { CandyMachine } from '../solanaUtils/solanaUtils'\r\n\r\nexport type MintState = {\r\n    dateStart: Date\r\n    balance: number | null\r\n    isSoldOut: boolean\r\n    itemsRemaining: number\r\n    candyMachine: CandyMachine | null\r\n    isMinting: boolean\r\n    isActive: boolean\r\n    alertState: AlertState\r\n}\r\n\r\nexport const mintReduser = (state: MintState, action: ActionCreator) => {\r\n    switch (action.type) {\r\n        case actionsType.REFRESH_CANDY_MACHINE_STATE:\r\n            const { itemsRemaining, isSoldOut, dateStart, candyMachine } = action.payload as RefreshingPayload\r\n                return {\r\n                    ...state,\r\n                    itemsRemaining: itemsRemaining,\r\n                    isSoldOut: isSoldOut,\r\n                    dateStart: dateStart,\r\n                    candyMachine: candyMachine\r\n                }\r\n        case actionsType.SET_IS_SOLD_OUT:\r\n            return {\r\n                ...state,\r\n                isSoldOut: action.payload as boolean\r\n            }\r\n        case actionsType.SET_BALANCE:\r\n            return {\r\n                ...state,\r\n                balance: action.payload as number\r\n            }\r\n        case actionsType.SET_IS_MINTING:\r\n            return {\r\n                ...state,\r\n                isMinting: action.payload as boolean\r\n            }\r\n        case actionsType.UPDATE_ALERT_STATE:\r\n            return {\r\n                ...state,\r\n                alertState: {\r\n                    ...action.payload as AlertState\r\n                }\r\n            }\r\n        case actionsType.UPDATE_IS_ACTIVE:\r\n            return {\r\n                ...state,\r\n                isActive: action.payload as boolean\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}","import { actionsType } from \"./mintActionTypes\";\r\nimport { CandyMachine } from '../solanaUtils/solanaUtils'\r\n\r\nexport type RefreshingPayload = {\r\n    itemsRemaining: number\r\n    isSoldOut: boolean\r\n    dateStart: Date\r\n    candyMachine: CandyMachine\r\n}\r\n\r\nexport type AlertState = {\r\n    open: boolean\r\n    message: string\r\n    severity: 'success' | 'info' | 'warning' | 'error' | undefined\r\n}\r\n\r\nexport type ActionCreator = {\r\n    type: string\r\n    payload: RefreshingPayload | AlertState | boolean | number\r\n}\r\n\r\nexport const refreshCandyMachineState = (payload: RefreshingPayload): ActionCreator => ({ type: actionsType.REFRESH_CANDY_MACHINE_STATE, payload })\r\nexport const changeMintingStatus = (payload: boolean): ActionCreator => ({ type: actionsType.SET_IS_MINTING, payload })\r\nexport const changeSoldOutStatus = (payload: boolean): ActionCreator => ({ type: actionsType.SET_IS_SOLD_OUT, payload })\r\nexport const settingBalanceValue = (payload: number): ActionCreator => ({ type: actionsType.SET_BALANCE, payload })\r\nexport const updateAlertState = (payload: AlertState): ActionCreator => ({ type: actionsType.UPDATE_ALERT_STATE, payload })\r\nexport const updateIsActive = (payload: boolean): ActionCreator => ({ type: actionsType.UPDATE_IS_ACTIVE, payload })","import { useEffect, useReducer } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\n\r\nimport * as anchor from '@project-serum/anchor'\r\nimport { awaitTransactionSignatureConfirmation, getCandyMachineState, mintOneToken } from '../helpers/solanaUtils/solanaUtils'\r\nimport { LAMPORTS_PER_SOL } from '@solana/web3.js'\r\nimport { useAnchorWallet } from '@solana/wallet-adapter-react'\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui'\r\n\r\nimport { CryptoWallet } from '../../../store/cryptoWalletStore/types'\r\nimport { updateWalletBalance } from '../../../store/cryptoWalletStore/walletActionCreatores'\r\nimport { Button, CircularProgress, Snackbar } from '@material-ui/core'\r\nimport Alert from \"@material-ui/lab/Alert\"\r\nimport { CountDown } from '../countDown/CountDown'\r\nimport { mintReduser } from '../helpers/mintUseReducer/mintReducer'\r\nimport { \r\n    refreshCandyMachineState, \r\n    changeMintingStatus, \r\n    changeSoldOutStatus, \r\n    settingBalanceValue,\r\n    updateAlertState,\r\n    updateIsActive,\r\n    AlertState\r\n} from '../helpers/mintUseReducer/mintActionCreators'\r\nimport './MintNft.scss'\r\n\r\ntype MintProps = {\r\n    candyMachineId: anchor.web3.PublicKey\r\n    config: anchor.web3.PublicKey\r\n    connection: anchor.web3.Connection\r\n    startDate: number\r\n    treasury: anchor.web3.PublicKey\r\n    txTimeout: number\r\n}\r\n\r\nexport const MintNft = ({ candyMachineId, config, connection, startDate, treasury, txTimeout }: MintProps) => {\r\n    const cryptoWallet = useSelector((state: { wallet: CryptoWallet }) => state.wallet)\r\n    const dispatchCryptoWallet = useDispatch()\r\n    \r\n    const initialState = {\r\n        balance: cryptoWallet.balance,\r\n        dateStart: new Date(startDate),\r\n        isSoldOut: false,\r\n        itemsRemaining: 0,\r\n        candyMachine: null,\r\n        isMinting: false,\r\n        isActive: false,\r\n        alertState: {\r\n            open: false,\r\n            message: '',\r\n            severity: undefined\r\n        }\r\n    }\r\n\r\n    const [ state, dispatch ] = useReducer(mintReduser, initialState)\r\n    const { candyMachine, isMinting, isSoldOut, itemsRemaining, balance, dateStart, alertState, isActive } = state\r\n    const wallet = useAnchorWallet()\r\n\r\n    const updateCandyMachineState = () => {\r\n        let isMounted = true;\r\n        (async () => {\r\n            if (!wallet) return\r\n\r\n            try {\r\n                const { candyMachine, goLiveDate, itemsRemaining } = await getCandyMachineState(wallet as anchor.Wallet, candyMachineId, connection)\r\n                dispatch(refreshCandyMachineState({\r\n                    itemsRemaining: itemsRemaining,\r\n                    isSoldOut: itemsRemaining === 0,\r\n                    dateStart: goLiveDate,\r\n                    candyMachine: candyMachine\r\n                }))\r\n\r\n            } catch (error) {\r\n                console.error(error)\r\n            }\r\n        })()\r\n\r\n        return () => {\r\n            // eslint-disable-next-line  @typescript-eslint/no-unused-vars \r\n            isMounted = false\r\n        }\r\n    }\r\n\r\n    const mintToken = async (): Promise<void> => {\r\n        try {\r\n            dispatch(changeMintingStatus(true))\r\n            if (wallet && candyMachine?.program) {\r\n                const mintTxId = await mintOneToken( candyMachine, config, wallet.publicKey, treasury)\r\n\r\n                const status = await awaitTransactionSignatureConfirmation(mintTxId, txTimeout, connection, 'singleGossip', false)\r\n\r\n                if (!status?.err) {\r\n                    const payload: AlertState = { open: true, message: 'Congratulations! Mint succeeded! Check your wallet!', severity: 'success' }\r\n                    dispatch(updateAlertState(payload))\r\n                } else {\r\n                    const payload: AlertState = { open: true, message: 'Mint failed! Please try again!', severity: 'error' }\r\n                    dispatch(updateAlertState(payload))\r\n                }\r\n            }\r\n        } catch (error: any) {\r\n            let message = error.msg || 'Minting failed! Please try again!'\r\n\r\n            if (!error.msg) {\r\n                if (error.message.indexOf('0x138')) {\r\n                } else if (error.message.indexOf('0x137')) {\r\n                    message = 'SOLD OUT!'\r\n                } else if (error.message.indexOf('0x135')) {\r\n                    message = 'Insufficient funds to mint. Please fund your wallet.'\r\n                }\r\n            } else {\r\n                if (error.code === 311) {\r\n                    message = 'SOLD OUT!'\r\n                    dispatch(changeSoldOutStatus(true))\r\n                    dispatch(changeMintingStatus(false))\r\n                } else if (error.code === 312) {\r\n                    message = 'Minting period hasn`t started yet.'\r\n                }\r\n            }\r\n            const payload: AlertState = { open: true, message, severity: 'error' }\r\n            dispatch(updateAlertState(payload))\r\n        } finally {\r\n            if (wallet) {\r\n                const balance = await connection.getBalance(wallet.publicKey)\r\n                const solBalance = balance / LAMPORTS_PER_SOL\r\n                dispatch(settingBalanceValue(solBalance))\r\n                dispatchCryptoWallet(updateWalletBalance(solBalance))\r\n            }\r\n            dispatch(changeMintingStatus(false))\r\n            updateCandyMachineState()\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        let isMounted = true;\r\n\r\n        (async () => {\r\n            if (wallet) {\r\n                const balance = await connection.getBalance(wallet.publicKey)\r\n                const solBalance = balance / LAMPORTS_PER_SOL\r\n                dispatch(settingBalanceValue(solBalance))\r\n                dispatchCryptoWallet(updateWalletBalance(solBalance))\r\n            }\r\n        })();\r\n\r\n        return () => { \r\n            // eslint-disable-next-line  @typescript-eslint/no-unused-vars \r\n            isMounted = false \r\n        }\r\n    }, [wallet, connection, dispatchCryptoWallet])\r\n\r\n    useEffect(updateCandyMachineState, [wallet, candyMachineId, connection])\r\n\r\n    return (\r\n        <>\r\n            <div className=\"mint-container\">\r\n                <div className={wallet ? 'wallet-info' : 'description'}>\r\n                    {wallet ? (\r\n                        <>\r\n                            <p>Your balance - {balance} SOL</p>\r\n                            {isSoldOut ? <p className=\"sold-info\">Sold Out!</p> : <p>Images remaining - {itemsRemaining}</p>}\r\n                        </>\r\n                    ) : (\r\n                        <p>Generate a unique image</p>\r\n                    )}\r\n                </div>\r\n                {wallet ? \r\n                    isSoldOut ? null : (\r\n                        <Button \r\n                            variant='outlined'\r\n                            color='primary'\r\n                            disabled={isMinting || !isActive}\r\n                            onClick={mintToken}\r\n                        >\r\n                            {isActive ? (\r\n                                isMinting ? (\r\n                                    <CircularProgress />\r\n                                ) : (\r\n                                    'Mint Token'\r\n                                )\r\n                            ) : (\r\n                                <CountDown\r\n                                    date={dateStart}\r\n                                    onMount={({ completed }) =>\r\n                                        completed && dispatch(updateIsActive(true))\r\n                                    }\r\n                                    onComplete={() => dispatch(updateIsActive(true))}\r\n                                />\r\n                            )}\r\n                        </Button>\r\n                    )\r\n                : (\r\n                    <WalletDialogButton color='primary' />\r\n                )}\r\n                <Snackbar\r\n                    open={alertState.open}\r\n                    autoHideDuration={6000}\r\n                    onClose={() => dispatch(updateAlertState({ open: false, message: '', severity: undefined }))}\r\n                >\r\n                    <Alert\r\n                        onClose={() => dispatch(updateAlertState({ open: false, message: '', severity: undefined }))}\r\n                        severity={alertState.severity}\r\n                    >{alertState.message}</Alert>\r\n                </Snackbar>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { CandyMachineSetup } from \"./machineSetup/CandyMachineSetup\"\r\nimport { MintNft } from \"./mintNft/MintNft\"\r\nimport useCandyConf from \"../../hooks/useCandyConf\"\r\nimport './Mint.scss'\r\n\r\nconst txTimeout = 30000\r\n\r\nconst Mint = () => {\r\n    const machineConf = useCandyConf()\r\n\r\n    return (\r\n        <div className='mint__wrapper'>\r\n            <CandyMachineSetup />\r\n            {machineConf && \r\n                <MintNft \r\n                    candyMachineId={machineConf.candyMachineId}\r\n                    config={machineConf.config}\r\n                    connection={machineConf.connection}\r\n                    startDate={machineConf.startDateSeed}\r\n                    treasury={machineConf.treasury}\r\n                    txTimeout={txTimeout}\r\n                />\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Mint"],"sourceRoot":""}