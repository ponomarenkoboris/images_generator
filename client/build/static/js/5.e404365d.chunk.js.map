{"version":3,"sources":["store/metadataStore/metaActionCreators.ts","http-conf/request.ts","components/collectionCreate/helpers/utils.ts","components/collectionCreate/metadataSetup/MetadataSetup.tsx","store/algorithmSetupStore/algorithmActionCreators.ts","components/collectionCreate/algorithSetup/AlgorithmSetup.tsx","store/assetsStore/assetsActionCreators.ts","components/collectionCreate/assetsSlices/uploadAsset/UploadAsset.tsx","components/collectionCreate/assetsSlices/assetView/AssetView.tsx","components/collectionCreate/assetsSlices/AssetsSlices.tsx","components/collectionCreate/CreateCollectables.tsx"],"names":["changePropertyCreators","creatorId","isAddress","newValue","type","actionTypes","UPDATE_META_PROPERTIES_CREATORS","payload","uploadMeta","UPLOAD_META","SERVER_URL","endpoints","request","axios","create","baseURL","withCredentials","convertAssets","filesList","Promise","resolve","assets","map","file","reject","reader","FileReader","onload","name","url","result","onerror","error","readAsDataURL","all","then","asset","idx","id","Date","getTime","catch","Error","validateAssetName","match","toNumberValue","value","isNaN","parseInt","validateConf","data","Object","values","forEach","Array","isArray","length","item","generateAssets","requestConfig","a","metadata","properties","creators","address","share","fetch","method","headers","body","JSON","stringify","response","ok","blob","downloadUrl","window","URL","createObjectURL","link","document","createElement","href","download","appendChild","click","remove","console","MetadataSetup","tokenMetadata","useSelector","state","dispatch","useDispatch","saveMetadata","assign","post","log","className","TextField","label","onChange","e","target","UPDATE_META_NAME","symbol","UPDATE_META_SYMBOL","description","UPDATE_META_DESCRIPTION","seller_fee_basis_points","seller","UPDATE_META_SELLER","collection","collectionName","UPDATE_META_COLLECTION_NAME","family","collectionFamily","UPDATE_META_COLLECTION_FAMILY","FormControl","InputLabel","Select","labelId","category","UPDATE_META_PROPERTIES_CATEGORY","MenuItem","IconButton","onClick","REMOVE_META_PROPERTIES_CREATORS","removeCreator","Button","ADD_META_PROPERTIES_CREATORS","variant","color","updateSize","isHeight","algTypes","UPDATE_IMAGE_SIZE","AlgorithmSetup","algConf","outputConf","saveOutputConf","images_count","count","UPDATE_IMAGES_COUNT","size","width","height","time_limit","timout","UPDATE_TIMEOUT","sequences_is_unique","isUnique","UPDATE_SEQUENCES_UNIQUE","backgrondColor","UPDATE_BACKGROUND_COLOR","backgroud_color_rgba","downloadSlices","assetsTypes","DOWNLOAD_SLICES","UploadAsset","folderId","imagesDropped","fileInputRef","useRef","useState","isDrag","setIsDrag","dragStopStartOverHandler","status","preventDefault","ref","accept","files","multiple","onDragStart","onDragLeave","onDragOver","onDrop","dataTransfer","filesDropped","current","AssetView","isChanging","setIsChanging","updatedName","setUpdatedName","nameIsCorrect","setNameIsCorrect","useEffect","src","alt","style","assetId","UPDATE_ASSET_NAME","DELETE_ASSET","AssetsSlices","assetsSlices","folderToUpdate","setFolderToUpdate","isDisabled","setIsDisabled","isGenerates","setIsGenerates","conf","folderNames","i","folder","indexOf","folderName","j","generatorAvaliable","saveFolderChanges","entries","UPDATE_FOLDER","createAssets","updateAssetsList","fileList","assetsFiles","push","UPDATE_ASSETS","ADD_FOLDER","Accordion","AccordionSummary","expandIcon","prevState","stopPropagation","AccordionDetails","DELETE_FOLDER","deleteFolder","disabled","CircularProgress","CreateCollectables","downloadSetup","get","UPLOAD_CONF"],"mappings":"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","file":"static/js/5.e404365d.chunk.js","sourcesContent":["import { Creator, MetadataActionCreator, TokenMetadata, CreatorsUpdateType } from './types'\r\nimport actionTypes from './metaActionTypes'\r\n\r\nexport const changeName = (name: string): MetadataActionCreator => ({ type: actionTypes.UPDATE_META_NAME, payload: name })\r\nexport const changeDescription = (description: string): MetadataActionCreator => ({ type: actionTypes.UPDATE_META_DESCRIPTION, payload: description })\r\nexport const changeSymbol = (symbol: string): MetadataActionCreator =>  ({ type: actionTypes.UPDATE_META_SYMBOL, payload: symbol })\r\nexport const changeSeller = (seller: number): MetadataActionCreator<number> =>  ({ type: actionTypes.UPDATE_META_SELLER, payload: seller })\r\n\r\nexport const changeCollectionName = (collectionName: string): MetadataActionCreator =>  ({ type: actionTypes.UPDATE_META_COLLECTION_NAME, payload: collectionName })\r\nexport const changeCollectionFamily = (collectionFamily: string): MetadataActionCreator =>  ({ type: actionTypes.UPDATE_META_COLLECTION_FAMILY, payload: collectionFamily })\r\n\r\nexport const changePropertyCategory = (category: string): MetadataActionCreator => ({ type: actionTypes.UPDATE_META_PROPERTIES_CATEGORY, payload: category })\r\nexport const changePropertyCreators = (creatorId: number, isAddress: boolean, newValue: string | number): MetadataActionCreator<CreatorsUpdateType> => (\r\n    { type: actionTypes.UPDATE_META_PROPERTIES_CREATORS, payload: { isAddress, newValue, creatorId } }\r\n)\r\nexport const removeCreator = (id: number): MetadataActionCreator<number> => ({ type: actionTypes.REMOVE_META_PROPERTIES_CREATORS, payload: id })\r\nexport const addCreator = (payload: Creator): MetadataActionCreator<Creator> => ({ type: actionTypes.ADD_META_PROPERTIES_CREATORS, payload })\r\n\r\nexport const uploadMeta = (payload: TokenMetadata): MetadataActionCreator<TokenMetadata> => ({ type: actionTypes.UPLOAD_META, payload })","import axios from 'axios'\r\n\r\nexport const SERVER_URL = 'http://127.0.0.1:8000/'\r\nexport const endpoints = {\r\n    metadata: 'set-token-metadata/',\r\n    algorithmConfig: 'set-algorithm-config/',\r\n    createAssets: 'create-assets/',\r\n    getSetup: 'get-setup/'\r\n}\r\n\r\nconst request = axios.create({\r\n    baseURL: SERVER_URL,\r\n    withCredentials: true\r\n})\r\n\r\n\r\nexport default request","import { TokenMetadata } from \"../../../store/metadataStore/types\"\r\nimport { FolderState, Asset } from '../../../store/assetsStore/types'\r\nimport { OutputImageConf } from '../../../store/algorithmSetupStore/types'\r\nimport { SERVER_URL, endpoints } from \"../../../http-conf/request\"\r\n\r\nexport type RequestConfig = {\r\n    metadata: TokenMetadata\r\n    outputConf: OutputImageConf\r\n    assetsSlices: FolderState[]\r\n}\r\n\r\ntype ServerAsset = { name: string, url: string }\r\n\r\nconst convertAssets = (filesList: File[]): Promise<Asset[]> => {\r\n    return new Promise ((resolve) => {\r\n        const assets = filesList.map((file: File): Promise<ServerAsset> => {\r\n            return new Promise((resolve, reject) => {\r\n                const reader = new FileReader();\r\n                reader.onload = () => resolve({ name: file.name, url: reader.result as string});\r\n                reader.onerror = error => reject(error);\r\n                reader.readAsDataURL(file);\r\n            })\r\n        })\r\n\r\n        Promise.all(assets)\r\n            .then(assets => {\r\n                resolve(assets.map((asset, idx) => ({ ...asset, id: new Date().getTime() * idx })))\r\n            })\r\n            .catch(error => {\r\n                throw new Error(`Error! ${error}`)\r\n            })\r\n    })\r\n}\r\n\r\nexport const validateAssetName = (name: string): boolean => `${name}`.match(/#\\d+.png$/) ? true : false\r\nexport const toNumberValue = (value: string): number => isNaN(parseInt(value)) ? 0 : parseInt(value)\r\n\r\nconst validateConf = (data: object, result?: boolean): boolean | void => { \r\n    Object.values(data).forEach(value => {\r\n        if (typeof value !== 'boolean' && !value) result = true\r\n        if (Array.isArray(value)) {\r\n            if (value.length === 0) result = true\r\n            value.forEach(item => validateConf(item))\r\n        }\r\n        if (typeof value === 'object') result = validateConf(value, result) as boolean\r\n    })\r\n    \r\n    return result\r\n}\r\n\r\nconst generatorAvaliable = (conf: RequestConfig): boolean => {\r\n    let isDisabled: boolean = false\r\n    const { metadata, assetsSlices, outputConf } = conf\r\n    \r\n    isDisabled = validateConf(metadata) as boolean\r\n    \r\n    if (isDisabled) return isDisabled\r\n\r\n    isDisabled = validateConf(outputConf) as boolean\r\n\r\n    if (isDisabled) return isDisabled\r\n\r\n    if (assetsSlices.length !== 0) { \r\n        const folderNames: string[] = []\r\n        for (let i = 0; i < conf.assetsSlices.length; i++) {\r\n            const folder = conf.assetsSlices[i]\r\n            isDisabled = folderNames.indexOf(folder.folderName) !== -1 ? true : false\r\n\r\n            if (folder.assets.length === 0) isDisabled = true\r\n            if (isDisabled) break\r\n\r\n            for (let j = 0; j < folder.assets.length; j++) {\r\n                if (!validateAssetName(folder.assets[j].name)) {\r\n                    isDisabled = true\r\n                    break\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        isDisabled = true\r\n    }\r\n    return isDisabled\r\n}\r\n\r\nexport const generateAssets = async (requestConfig: RequestConfig): Promise<boolean | void> => {\r\n    const data = {\r\n        ...requestConfig,\r\n        metadata: {\r\n            ...requestConfig.metadata,\r\n            properties: {\r\n                ...requestConfig.metadata.properties,\r\n                creators: requestConfig.metadata.properties.creators.map(({ address, share }) => ({ address, share }))\r\n            }\r\n        }\r\n    }\r\n    try {\r\n        const response = await fetch(SERVER_URL + endpoints.createAssets, { \r\n            method: 'POST', \r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(data) \r\n        })\r\n        if (response.ok) {\r\n            const blob = await response.blob()\r\n            const downloadUrl = window.URL.createObjectURL(blob)\r\n            const link = document.createElement('a')\r\n            link.href = downloadUrl\r\n            link.download = 'assets'\r\n            document.body.appendChild(link)\r\n            link.click()\r\n            link.remove()\r\n            return true\r\n        }\r\n    } catch (error) {\r\n        console.error(error)\r\n        return false\r\n    }\r\n\r\n}\r\n\r\nexport { convertAssets, generatorAvaliable }","import { useDispatch, useSelector } from 'react-redux'\r\nimport { \r\n    changeName,\r\n    changeDescription,\r\n    changeSymbol,\r\n    changeSeller,\r\n    changeCollectionName,\r\n    changeCollectionFamily,\r\n    changePropertyCategory,\r\n    changePropertyCreators,\r\n    removeCreator,\r\n    addCreator,\r\n} from '../../../store/metadataStore/metaActionCreators'\r\nimport { Category } from '../../../store/metadataStore/types'\r\nimport { TokenMetadata } from '../../../store/metadataStore/types'\r\nimport { TextField, Button, FormControl, InputLabel, Select, MenuItem, IconButton } from \"@material-ui/core\"\r\nimport BackspaceIcon from '@material-ui/icons/Backspace';\r\nimport request, { endpoints } from '../../../http-conf/request'\r\nimport { toNumberValue } from '../helpers/utils'\r\nimport './MetadataSetup.scss'\r\n\r\nexport const MetadataSetup = () => {\r\n    \r\n    const tokenMetadata = useSelector((state: { metadata: TokenMetadata }) => state.metadata)\r\n    const dispatch = useDispatch()\r\n\r\n    const saveMetadata = async () => {\r\n        const metadata = Object.assign({}, tokenMetadata)\r\n        metadata.properties.creators = metadata.properties.creators.map(({ address, share }) => ({ address, share }))\r\n        try {\r\n            await request.post(endpoints.metadata, metadata)\r\n        } catch (error) {\r\n            console.log(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='collectables__setup-metadata'>\r\n            <h2>Настройка token_metadata</h2>\r\n            <form>\r\n                <div className=\"metadata\">\r\n                    <TextField\r\n                        label='Имя арта (name)'\r\n                        value={tokenMetadata.name}\r\n                        onChange={e => dispatch(changeName(e.target.value))}\r\n                    />\r\n                    <TextField\r\n                        label='Символ арта (symbol)'\r\n                        value={tokenMetadata.symbol}\r\n                        onChange={e => dispatch(changeSymbol(e.target.value))}\r\n                    />\r\n                    <TextField\r\n                        label='Описание арта (description)'\r\n                        value={tokenMetadata.description}\r\n                        onChange={e => dispatch(changeDescription(e.target.value))}\r\n                    />\r\n                    <TextField\r\n                        label='Процнет с прожади создателям (seller_fee_basis_points)'\r\n                        type='number'\r\n                        value={tokenMetadata.seller_fee_basis_points}\r\n                        onChange={e => dispatch(changeSeller(toNumberValue(e.target.value)))}\r\n                    />\r\n                    <TextField\r\n                        label='Имя коллекции (collection.name)'\r\n                        value={tokenMetadata.collection.name}\r\n                        onChange={e => dispatch(changeCollectionName(e.target.value))}\r\n                    />\r\n                    <TextField\r\n                        label='Семейство коллекции (collection.family)'\r\n                        value={tokenMetadata.collection.family}\r\n                        onChange={e => dispatch(changeCollectionFamily(e.target.value))}\r\n                    />\r\n                    <FormControl>\r\n                        <InputLabel id='proreties-category'>Выбирите категорию арта (properties.category)</InputLabel>\r\n                        <Select \r\n                            labelId='proreties-category'\r\n                            value={tokenMetadata.properties.category}\r\n                            onChange={(e) => dispatch(changePropertyCategory(e.target.value as Category))}\r\n                        >\r\n                            <MenuItem value={'image'}>image</MenuItem>\r\n                            <MenuItem value={'audio'}>audio</MenuItem>\r\n                            <MenuItem value={'vr'}>vr</MenuItem>\r\n                            <MenuItem value={'html'}>html</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                </div>\r\n                <div className=\"creators__wrapper\">\r\n                    {tokenMetadata.properties.creators.map(({ id, address, share }, idx) => (\r\n                        <div className='creator' key={id || new Date().getTime() + idx}>\r\n                            <div className='creator__info'>\r\n                                <TextField \r\n                                    label=\"Адресс кошелька создателя (creator.address)\"\r\n                                    value={address}\r\n                                    onChange={(e) => id && dispatch(changePropertyCreators(id, true, e.target.value))}\r\n                                />\r\n                                <TextField \r\n                                    label='Процент создателя (creator.share)'\r\n                                    type='number'\r\n                                    value={share}\r\n                                    onChange={(e) => id && dispatch(changePropertyCreators(id, false, toNumberValue(e.target.value)))}\r\n                                />\r\n                            </div>\r\n                            <div className='creator__action'>\r\n                                <IconButton\r\n                                    onClick={() => id && dispatch(removeCreator(id))}\r\n                                >\r\n                                    <BackspaceIcon />\r\n                                </IconButton>\r\n                            </div>\r\n                        </div>\r\n                    ))}\r\n                </div>\r\n                <div className=\"form__actions\">\r\n                    <Button\r\n                        onClick={() => dispatch(addCreator({ address: '', share: 0, id: new Date().getTime() }))}\r\n                        variant='outlined'\r\n                        color='primary'\r\n                    >\r\n                        Добавить создателя (properties.creators)\r\n                    </Button>\r\n                    <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={saveMetadata}\r\n                    >\r\n                        Сохранить настройки метадаты\r\n                    </Button>\r\n                </div>\r\n            </form>\r\n        </div>\r\n    )\r\n}","import algTypes from \"./algorithmTypes\"\r\nimport { AlgoActionCreator, OutputImageConf, SizeValue } from './types'\r\n\r\nexport const updateImagesCount = (count: number): AlgoActionCreator => ({ type: algTypes.UPDATE_IMAGES_COUNT, payload: count })\r\nexport const updateSize = (isHeight: boolean, newValue: number): AlgoActionCreator<SizeValue> => ({ type: algTypes.UPDATE_IMAGE_SIZE, payload: { isHeight, newValue } }\r\n)\r\nexport const updateTimeout = (timout: boolean | number): AlgoActionCreator<boolean | number> => ({ type: algTypes.UPDATE_TIMEOUT, payload: timout })\r\n\r\nexport const updateSequencesUnique = (isUnique: string): AlgoActionCreator<string> => ({ type: algTypes.UPDATE_SEQUENCES_UNIQUE, payload: isUnique })\r\nexport const updateBackgroundColor = (backgrondColor: string): AlgoActionCreator<string> => ({ type: algTypes.UPDATE_BACKGROUND_COLOR, payload: backgrondColor })\r\n\r\nexport const uploadConf = (payload: OutputImageConf): AlgoActionCreator<OutputImageConf> => ({ type: algTypes.UPLOAD_CONF, payload })","import { useSelector, useDispatch } from 'react-redux'\r\nimport { OutputImageConf } from '../../../store/algorithmSetupStore/types'\r\nimport { \r\n    updateImagesCount, \r\n    updateSize, \r\n    updateTimeout, \r\n    updateSequencesUnique, \r\n    updateBackgroundColor\r\n} from '../../../store/algorithmSetupStore/algorithmActionCreators'\r\nimport { toNumberValue } from '../helpers/utils'\r\nimport { TextField, Button,FormControl, InputLabel, Select, MenuItem } from '@material-ui/core'\r\nimport request, { endpoints } from '../../../http-conf/request'\r\nimport './AlgorithmSetup.scss'\r\n\r\nexport const AlgorithmSetup = () => {\r\n    const algConf = useSelector((state: { outputConf: OutputImageConf }) => state.outputConf)\r\n    const dispatch = useDispatch()\r\n\r\n    const saveOutputConf = async () => {\r\n        try {\r\n            const response = await request.post(endpoints.algorithmConfig, algConf)\r\n            console.log(response)\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='collecrables__setup-output__conf'>\r\n            <h2>Настройка output_image_configuration</h2>\r\n            <div className='output__conf'>\r\n                <form>\r\n                    <TextField \r\n                        variant='outlined'\r\n                        label='Колличество изображений'\r\n                        type='number'\r\n                        value={algConf.images_count}\r\n                        onChange={(e) => dispatch(updateImagesCount(toNumberValue(e.target.value)))}\r\n                    />\r\n                    <TextField\r\n                        variant='outlined'\r\n                        label='Ширина'\r\n                        type='number'\r\n                        value={algConf.size.width}\r\n                        onChange={(e) => dispatch(updateSize(false, toNumberValue(e.target.value)))}\r\n                    />\r\n                    <TextField \r\n                        variant='outlined'\r\n                        label='Высота'\r\n                        type='number'\r\n                        value={algConf.size.height}\r\n                        onChange={(e) => dispatch(updateSize(true, toNumberValue(e.target.value)))}\r\n                    />\r\n                    <TextField \r\n                        variant='outlined'\r\n                        label='Время генерации в сек. (false - неогранич.)'\r\n                        value={algConf.time_limit}\r\n                        onChange={e => dispatch(updateTimeout(toNumberValue(e.target.value) || false))}\r\n                    />\r\n                    <FormControl className=\"form__select\">\r\n                        <InputLabel id='sequences_inuque'>Арты уникальны</InputLabel>\r\n                        <Select \r\n                            labelId='sequences_inuque'\r\n                            value={algConf.sequences_is_unique}\r\n                            variant='outlined'\r\n                            onChange={(e) => dispatch(updateSequencesUnique(e.target.value as string))}\r\n                        >\r\n                            <MenuItem value={'true'}>true</MenuItem>\r\n                            <MenuItem value={'false'}>false</MenuItem>\r\n                        </Select>\r\n                    </FormControl>\r\n                    <TextField \r\n                        variant='outlined'\r\n                        label='Фоновый цвет картинки (rgba)'\r\n                        onChange={(e) => dispatch(updateBackgroundColor(e.target.value))}\r\n                        value={algConf.backgroud_color_rgba}\r\n                    />\r\n                </form>\r\n                <div className=\"output__conf-actions\">\r\n                    <Button\r\n                        variant='contained'\r\n                        color='primary'\r\n                        onClick={saveOutputConf}\r\n                    >\r\n                        Сохранить настройки алгоритма\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import assetsTypes from \"./assetsTypes\"\r\nimport { \r\n    AssetsActionCreator,\r\n    UpdatedFolder, \r\n    UpdateAssetsType, \r\n    AssetToDelete, \r\n    UpdateAssetNamePaylaod, \r\n    FolderState\r\n} from \"./types\"\r\n\r\nexport const addFolder = (): AssetsActionCreator => ({ type: assetsTypes.ADD_FOLDER })\r\nexport const deleteFolder = (id: number): AssetsActionCreator => ({ type: assetsTypes.DELETE_FOLDER, payload: id })\r\nexport const updateFolder = (payload: UpdatedFolder): AssetsActionCreator<UpdatedFolder> => ({ type: assetsTypes.UPDATE_FOLDER, payload })\r\nexport const downloadSlices = (payload: FolderState[]): AssetsActionCreator<FolderState[]> => ({ type: assetsTypes.DOWNLOAD_SLICES, payload })\r\n\r\nexport const uploadAssets = (payload: UpdateAssetsType): AssetsActionCreator<UpdateAssetsType> => ({ type: assetsTypes.UPDATE_ASSETS, payload })\r\nexport const deleteAsset = (payload: AssetToDelete): AssetsActionCreator<AssetToDelete> => ({ type: assetsTypes.DELETE_ASSET, payload })\r\nexport const updateAsset = (payload: { folderId: number, assetId: number, name: string }): AssetsActionCreator<UpdateAssetNamePaylaod> => ({ type: assetsTypes.UPDATE_ASSET_NAME, payload })","import React, { useState, useRef } from 'react'\r\nimport PhotoOutlinedIcon from '@material-ui/icons/PhotoOutlined'\r\nimport './UploadAsset.scss'\r\n\r\ntype UploadAssetsProps = {\r\n    folderId: number\r\n    imagesDropped: (folderId: number, files: FileList) => void\r\n}\r\n\r\nexport const UploadAsset = ({ folderId, imagesDropped }: UploadAssetsProps) => {\r\n    const fileInputRef = useRef<HTMLInputElement>(null)\r\n    const [isDrag, setIsDrag] = useState(false)\r\n\r\n    const dragStopStartOverHandler = (e: React.DragEvent<HTMLDivElement>, status: boolean) => {\r\n        e.preventDefault()\r\n        setIsDrag(status)\r\n    }\r\n\r\n    const filesDropped = (e: React.DragEvent<HTMLDivElement>) => {\r\n        e.preventDefault()\r\n        imagesDropped(folderId, e.dataTransfer.files)\r\n        setIsDrag(false)\r\n    }\r\n\r\n    const fileUpload = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        e.preventDefault()\r\n        imagesDropped(folderId, e.target.files as FileList)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <input \r\n                className='file__input'\r\n                type=\"file\" \r\n                ref={fileInputRef}\r\n                accept=\"image/png\"\r\n                onChange={fileUpload}\r\n                multiple\r\n            />\r\n            <div\r\n                className='drag__upload-area'\r\n                onDragStart={e => dragStopStartOverHandler(e, true)}\r\n                onDragLeave={e => dragStopStartOverHandler(e, false)}\r\n                onDragOver={e => dragStopStartOverHandler(e, true)}\r\n                onDrop={e => filesDropped(e)}\r\n                onClick={() => fileInputRef.current?.click()}\r\n            >\r\n                <div className='upload-area__inner'>\r\n                    <PhotoOutlinedIcon />\r\n                    <p>{isDrag ? 'Опустите изображения' : 'Переместите изображения или нажмите на поле'}</p>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n}","import { useState, useEffect } from 'react'\r\nimport { IconButton, TextField } from \"@material-ui/core\"\r\nimport { useDispatch } from 'react-redux'\r\nimport { validateAssetName } from '../../helpers/utils'\r\nimport { deleteAsset, updateAsset } from '../../../../store/assetsStore/assetsActionCreators'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt'\r\n\r\ntype AssetViewProps = {\r\n    name: string\r\n    url: string\r\n    id: number\r\n    folderId: number\r\n}\r\n\r\nexport const AssetView = ({ name, url, id, folderId }: AssetViewProps) => {\r\n    const [isChanging, setIsChanging] = useState(false)\r\n    const [updatedName, setUpdatedName] = useState(name)\r\n    const [nameIsCorrect, setNameIsCorrect] = useState(validateAssetName(updatedName))\r\n    const dispatch = useDispatch()\r\n\r\n    useEffect(() => { setNameIsCorrect(validateAssetName(updatedName)) }, [updatedName])\r\n\r\n    const changeUpdates = () => {\r\n        if (updatedName === name) return\r\n        dispatch(updateAsset({ folderId, assetId: id, name: updatedName }))\r\n        setIsChanging(false)\r\n    }\r\n\r\n    return (\r\n        <div className='file__wrapper'>\r\n            <img src={url} alt=\"Asset\" />\r\n            <div\r\n                className='file__name' \r\n                style={{ color: !nameIsCorrect ? 'red' : 'initial' }}\r\n            >\r\n                {!isChanging ? updatedName : (\r\n                    <TextField \r\n                        value={updatedName}\r\n                        onChange={(e) => setUpdatedName(e.target.value)}\r\n                    />\r\n                )}\r\n                <span>{!nameIsCorrect && 'Пример названия файла: имя_файла#процент_выпадания.png'}</span>\r\n            </div>\r\n            <div className='file__actions'>\r\n                {isChanging ? (\r\n                    <>\r\n                        <IconButton\r\n                            onClick={changeUpdates}\r\n                        >\r\n                            <SaveAltIcon />\r\n                        </IconButton>\r\n                    </>\r\n                ) : (\r\n                    <>\r\n                        <IconButton\r\n                            onClick={() => setIsChanging(true)}\r\n                        >\r\n                            <CreateIcon />\r\n                        </IconButton>\r\n                        <IconButton\r\n                            onClick={() => dispatch(deleteAsset({ folderId, assetId: id }))}\r\n                        >\r\n                            <DeleteIcon />\r\n                        </IconButton>\r\n                    </>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { useState, useEffect } from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux'\r\nimport { addFolder, deleteFolder, updateFolder, uploadAssets } from '../../../store/assetsStore/assetsActionCreators'\r\nimport { UpdatedFolder } from '../../../store/assetsStore/types'\r\nimport { \r\n    Accordion, \r\n    AccordionSummary, \r\n    AccordionDetails, \r\n    Button, \r\n    IconButton, \r\n    TextField, \r\n    CircularProgress  \r\n} from \"@material-ui/core\"\r\nimport { UploadAsset } from './uploadAsset/UploadAsset'\r\nimport { convertAssets, generateAssets, RequestConfig, generatorAvaliable } from '../helpers/utils'\r\nimport { AssetView } from './assetView/AssetView'\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\r\nimport DeleteIcon from '@material-ui/icons/Delete'\r\nimport CreateIcon from '@material-ui/icons/Create'\r\nimport SaveAltIcon from '@material-ui/icons/SaveAlt'\r\nimport ClearIcon from '@material-ui/icons/Clear'\r\nimport './AssetsSlices.scss'\r\n\r\ntype FolderToUpdate = UpdatedFolder & { isChanging?: boolean }\r\n\r\nexport const AssetsSlices = () => {\r\n    const requestConfig = useSelector((state: RequestConfig): RequestConfig => \r\n        ({ metadata: state.metadata, outputConf: state.outputConf, assetsSlices: state.assetsSlices }));\r\n    const dispatch = useDispatch()\r\n    const [folderToUpdate, setFolderToUpdate] = useState({} as FolderToUpdate)\r\n    const [isDisabled, setIsDisabled] = useState(false)\r\n    const [isGenerates, setIsGenerates] = useState(false)\r\n    \r\n    useEffect(() => { setIsDisabled(generatorAvaliable(requestConfig)) }, [requestConfig])\r\n\r\n    const saveFolderChanges = () => {\r\n        if (Object.entries(folderToUpdate).length !== 0) {\r\n            delete folderToUpdate.isChanging\r\n            dispatch(updateFolder(folderToUpdate))\r\n        }\r\n        setFolderToUpdate({} as FolderToUpdate)\r\n    }\r\n\r\n    const createAssets = async () => {\r\n        setIsGenerates(true)\r\n        try {\r\n            await generateAssets(requestConfig)\r\n            setIsGenerates(false)\r\n        } catch (error) {\r\n            setIsGenerates(false)\r\n        }\r\n    }\r\n\r\n    const updateAssetsList = async (folderId: number, fileList: FileList) => {\r\n        const assetsFiles: File[] = []\r\n        for (let i = 0; i < fileList.length; i++) {\r\n            assetsFiles.push(fileList[i])\r\n        }\r\n        const assets = await convertAssets(assetsFiles)\r\n        dispatch(uploadAssets({ folderId, assets }))\r\n    }\r\n\r\n    return (\r\n        <div className='assets__slices'>\r\n            <div className='assets'>\r\n                <div className='assets__header'>\r\n                    <h2>Папки с исходными материалами</h2>\r\n                    <Button\r\n                        className='append__bottom'\r\n                        onClick={() => dispatch(addFolder())}\r\n                        variant='outlined'\r\n                    >\r\n                        Добавить папку\r\n                    </Button>\r\n                </div>\r\n                {requestConfig.assetsSlices.map(({ id, folderName, assets }) => (\r\n                    <div key={id} className='folder__wrapper'>\r\n                        <Accordion>\r\n                            <AccordionSummary\r\n                                expandIcon={<ExpandMoreIcon />}\r\n                            >\r\n                                {folderToUpdate.isChanging && folderToUpdate.id === id ? (\r\n                                    <TextField \r\n                                        variant='outlined'\r\n                                        value={folderToUpdate.folderName ? folderToUpdate.folderName : folderName}\r\n                                        onChange={e => setFolderToUpdate(prevState => ({ ...prevState, folderName: e.target.value }))}\r\n                                        onClick={e => e.stopPropagation()}\r\n                                    />\r\n                                ) : folderName}\r\n                            </AccordionSummary>\r\n                            <AccordionDetails>\r\n                                <div className='assets__list'>\r\n                                    {assets.map((asset) => <AssetView key={asset.id} {...asset} folderId={id}/>)}\r\n                                    <UploadAsset folderId={id} imagesDropped={updateAssetsList} />\r\n                                </div>\r\n                            </AccordionDetails>\r\n                        </Accordion>\r\n                        <div className='folder__actions'>\r\n                            {folderToUpdate.isChanging && folderToUpdate.id === id ? (\r\n                                <>\r\n                                    <IconButton\r\n                                        onClick={() => saveFolderChanges()}\r\n                                    >\r\n                                        <SaveAltIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => setFolderToUpdate({} as FolderToUpdate)}\r\n                                    >\r\n                                        <ClearIcon />\r\n                                    </IconButton>\r\n                                </>\r\n                            ) : (\r\n                                <>\r\n                                    <IconButton\r\n                                        onClick={() => setFolderToUpdate(prevState => ({ ...prevState, isChanging: true, id }))}\r\n                                    >\r\n                                        <CreateIcon />\r\n                                    </IconButton>\r\n                                    <IconButton\r\n                                        onClick={() => dispatch(deleteFolder(id))}\r\n                                    >\r\n                                        <DeleteIcon />\r\n                                    </IconButton>\r\n                                </>\r\n                            )}\r\n                        </div>\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <div className='assets__actions'>\r\n                <Button\r\n                    variant='outlined'\r\n                    className='generate__button'\r\n                    disabled={isDisabled}\r\n                    onClick={createAssets}\r\n                >   \r\n                    {isGenerates ? <CircularProgress /> : 'Сгенерировать коллекцию'}\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}","import { MetadataSetup } from \"./metadataSetup/MetadataSetup\"\r\nimport { AlgorithmSetup } from \"./algorithSetup/AlgorithmSetup\"\r\nimport { AssetsSlices } from \"./assetsSlices/AssetsSlices\"\r\nimport { Button } from \"@material-ui/core\"\r\nimport CloudDownloadIcon from '@material-ui/icons/CloudDownload';\r\nimport { uploadConf } from \"../../store/algorithmSetupStore/algorithmActionCreators\";\r\nimport { uploadMeta } from \"../../store/metadataStore/metaActionCreators\";\r\nimport { downloadSlices } from '../../store/assetsStore/assetsActionCreators'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { RequestConfig } from './helpers/utils'\r\nimport request, { endpoints } from '../../http-conf/request'\r\nimport './CreateCollectables.scss'\r\n\r\n\r\nconst CreateCollectables = () => {\r\n    const dispatch = useDispatch()\r\n\r\n    const downloadSetup = async () => {\r\n        try {\r\n            const response = await request.get(endpoints.getSetup)\r\n            if (response.data) {\r\n                const { metadata, outputConf, assetsSlices } = response.data as RequestConfig\r\n                if (outputConf) dispatch(uploadConf(outputConf))\r\n                if (metadata) dispatch(uploadMeta(metadata))\r\n                if (assetsSlices) dispatch(downloadSlices(assetsSlices))\r\n            }\r\n        } catch (error) {\r\n            console.error(error)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='collectables__setup'>\r\n            <div className='download__setup'>\r\n                <Button\r\n                    variant='outlined'\r\n                    onClick={downloadSetup}\r\n                >\r\n                    <CloudDownloadIcon />\r\n                    <p>Загрузить настройки с сервера</p>\r\n                </Button>\r\n            </div>\r\n            <div className='root__configuration'>\r\n                <MetadataSetup />\r\n                <AlgorithmSetup />\r\n            </div>\r\n            <AssetsSlices />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateCollectables"],"sourceRoot":""}